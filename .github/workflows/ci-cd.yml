name: CI/CD for Company Profile App 

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      APP_NAME: company-profile-container
      OPENSHIFT_NAMESPACE: risabafatir-dev
      IMAGE_REGISTRY: quay.io
      IMAGE_TAGS: latest
      APP_PORT: 8080
      OPENSHIFT_SERVER: ${{ secrets.OPENSHIFT_SERVER }}
      OPENSHIFT_TOKEN: ${{ secrets.OPENSHIFT_TOKEN }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Install OpenShift CLI
      run: |
        curl -LO https://mirror.openshift.com/pub/openshift-v4/clients/oc/latest/linux/oc.tar.gz
        tar -xvf oc.tar.gz
        sudo mv oc /usr/bin/
        chmod a+x /usr/bin/oc
        oc version  # Verify installation

    - name: Build and Push Image to Quay.io
      env:
        QUAY_USERNAME: ${{ secrets.QUAY_USERNAME }}
        QUAY_PASSWORD: ${{ secrets.QUAY_PASSWORD }}
      run: |
        IMAGE=quay.io/${{ secrets.QUAY_USERNAME }}/${{ env.APP_NAME }}:${{ env.IMAGE_TAGS }}
        echo "$QUAY_PASSWORD" | podman login quay.io -u "$QUAY_USERNAME" --password-stdin
        podman build -t $IMAGE .
        podman push $IMAGE

    - name: Login to OpenShift
      run: |
        oc login ${{ secrets.OPENSHIFT_SERVER }} \
          --token=${{ secrets.OPENSHIFT_TOKEN }} \
          --insecure-skip-tls-verify

    - name: Deploy Application on OpenShift
      run: |
        IMAGE=${{ env.IMAGE_REGISTRY }}/${{ secrets.QUAY_USERNAME }}/${{ env.APP_NAME }}:${{ env.IMAGE_TAGS }}
        if oc get deployment ${{ env.APP_NAME }} -n ${{ env.OPENSHIFT_NAMESPACE }} >/dev/null 2>&1; then
          echo "Updating existing deployment..."
          oc set image deployment/${{ env.APP_NAME }} ${{ env.APP_NAME }}=$IMAGE -n ${{ env.OPENSHIFT_NAMESPACE }}
          # Patch the deployment to always pull the image
          oc patch deployment ${{ env.APP_NAME }} -n ${{ env.OPENSHIFT_NAMESPACE }} --type='json' \
            -p='[{"op": "replace", "path": "/spec/template/spec/containers/0/imagePullPolicy", "value": "Always"}]'
          oc rollout restart deployment/${{ env.APP_NAME }} -n ${{ env.OPENSHIFT_NAMESPACE }}
        else
          echo "Creating new deployment..."
          oc create deployment ${{ env.APP_NAME }} --image=$IMAGE -n ${{ env.OPENSHIFT_NAMESPACE }}
          # Ensure new deployment pulls the image on startup
          oc patch deployment ${{ env.APP_NAME }} -n ${{ env.OPENSHIFT_NAMESPACE }} --type='json' \
            -p='[{"op": "replace", "path": "/spec/template/spec/containers/0/imagePullPolicy", "value": "Always"}]'
        fi

    - name: Ensure Service Exists
      run: |
        if ! oc get service ${{ env.APP_NAME }} -n ${{ env.OPENSHIFT_NAMESPACE }} >/dev/null 2>&1; then
          echo "Creating new service..."
          oc expose deployment ${{ env.APP_NAME }} --port=${{ env.APP_PORT }} -n ${{ env.OPENSHIFT_NAMESPACE }}
        else
          echo "Service already exists."
        fi

    - name: Ensure Route Exists
      run: |
        if ! oc get route ${{ env.APP_NAME }} -n ${{ env.OPENSHIFT_NAMESPACE }} >/dev/null 2>&1; then
          echo "Creating new route..."
          oc create route edge --service=${{ env.APP_NAME }} --insecure-policy=Redirect -n ${{ env.OPENSHIFT_NAMESPACE }}
        else
          echo "Route already exists."
        fi
